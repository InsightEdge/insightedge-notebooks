{"paragraphs":[{"title":"Load dependancy","text":"%dep\nz.load(\"org.postgresql:postgresql:9.4.1211\")","dateUpdated":"2017-03-21T03:08:16-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1489686254675_796202459","id":"20170316-134414_1960853729","result":{"code":"SUCCESS","type":"TEXT","msg":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@2468e825\n"},"dateCreated":"2017-03-16T01:44:14-0400","dateStarted":"2017-03-21T03:08:16-0400","dateFinished":"2017-03-21T03:08:21-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:312"},{"title":"PositionIndicative class defination","text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class PositionIndicative(\n\n   @BeanProperty\n   @SpaceId\n   var uniqueId: Int,\n   \n   @BeanProperty\n   @SpaceIndex\n   var positionId: Int,\n   \n   @BeanProperty\n   var positionIndicativeTypeId: Int,\n   \n   @BeanProperty\n   var value: Double,\n\n   @BeanProperty\n   var unitOfMeasure1: String,\n\n   @BeanProperty\n   var unitOfMeasure2: String\n) {\n   def this() = this(-1, -1, -1, -1.0, null, null)\n}","dateUpdated":"2017-03-21T03:08:24-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1489686742235_98790621","id":"20170316-135222_2037362766","result":{"code":"SUCCESS","type":"TEXT","msg":"res1: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@10629641\n"},"dateCreated":"2017-03-16T01:52:22-0400","dateStarted":"2017-03-21T03:08:24-0400","dateFinished":"2017-03-21T03:08:26-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:313"},{"title":"PositionFile class defination","text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class PositionFile(\n\n   @BeanProperty\n   @SpaceId\n   var uniqueId: Int,\n   \n   @BeanProperty\n   @SpaceIndex\n   var positionId: Int,\n   \n   @BeanProperty\n   var tradeIdDo: String,\n   \n   @BeanProperty\n   var tradeIdId: Int,\n\n   @BeanProperty\n   var tradeIdVersion: Int,\n\n   @BeanProperty\n   var tradeIdLeg: String,\n\n   @BeanProperty\n   var lifeCycleStatus: String\n) {\n   def this() = this(-1, -1, null, -1, -1, null, null)\n}","dateUpdated":"2017-03-21T03:22:21-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1489772004166_-895445904","id":"20170317-133324_1880336288","result":{"code":"SUCCESS","type":"TEXT","msg":"res2: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@648c2bc2\n"},"dateCreated":"2017-03-17T01:33:24-0400","dateStarted":"2017-03-21T03:22:21-0400","dateFinished":"2017-03-21T03:22:22-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:314"},{"title":"CalculatedMeasures class defination","text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class CalculatedMeasures(\n\n   @BeanProperty\n   @SpaceId\n   @SpaceIndex\n   var uniqueId: Int,\n   \n   @BeanProperty\n   var positionId: Int,\n   \n   @BeanProperty\n   var ubsMeasureId: Int,\n\n   @BeanProperty\n   var scenarioIdDomain: String,\n   \n   @BeanProperty\n   var scenarioIdId: Int,\n\n   @BeanProperty\n   var marketDataSegmentId1: Int,\n\n   @BeanProperty\n   var marketDataSegmentId2: Int,\n\n   @BeanProperty\n   var valueUSD: Double,\n\n   @BeanProperty\n   var unitOfMeasure: String,\n\n   @BeanProperty\n   var valueUnitOfMeasure: Double\n) {\n   def this() = this(-1, -1, -1, null, -1, -1, -1,-1, null, -1)\n}","dateUpdated":"2017-03-21T03:22:25-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1489772426744_-341376840","id":"20170317-134026_1900779164","result":{"code":"SUCCESS","type":"TEXT","msg":"res3: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@1a6dfec4\n"},"dateCreated":"2017-03-17T01:40:26-0400","dateStarted":"2017-03-21T03:22:25-0400","dateFinished":"2017-03-21T03:22:26-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:315"},{"title":"MarketDataSegment class","text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class MarketDataSegment(\n\n   @BeanProperty\n   @SpaceId\n   @SpaceIndex\n   var uniqueId: Int,\n   \n   @BeanProperty\n   @SpaceIndex\n   var marketDataSegmentId: Int,\n\n   @BeanProperty\n   var marketDatasetName: String,\n   \n   @BeanProperty\n   var name: String,\n\n   @BeanProperty\n   var marketDatasetType: String,\n\n   @BeanProperty\n   var marketDatasetContext: String,\n\n   @BeanProperty\n   var curveType: String\n) {\n   def this() = this(-1, -1, null, null, null, null, null)\n}","dateUpdated":"2017-03-21T03:22:45-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1490121267685_1781003618","id":"20170321-143427_197748092","result":{"code":"SUCCESS","type":"TEXT","msg":"res4: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@3b298296\n"},"dateCreated":"2017-03-21T02:34:27-0400","dateStarted":"2017-03-21T03:22:45-0400","dateFinished":"2017-03-21T03:22:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:316"},{"title":"MarketDataSegmentIndicative Class","text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class MarketDataSegmentIndicative(\n\n   @BeanProperty\n   @SpaceId\n   @SpaceIndex\n   var uniqueId: Int,\n   \n   @BeanProperty\n   @SpaceIndex\n   var marketDataSegmentId: Int,\n\n   @BeanProperty\n   var ubsIndicativeType: Int,\n   \n   @BeanProperty\n   var value: Double,\n\n   @BeanProperty\n   var unitOfMeasure1: String,\n\n   @BeanProperty\n   var unitOfMeasure2: String,\n\n   @BeanProperty\n   var sourceMethod: String,\n\n   @BeanProperty\n   var sourceType: String,\n\n   @BeanProperty\n   var sourceId: String\n) {\n   def this() = this(-1, -1, -1, -1.0, null, null, null, null, null)\n}","dateUpdated":"2017-03-21T03:22:53-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1490121775044_-617417045","id":"20170321-144255_1845832311","result":{"code":"SUCCESS","type":"TEXT","msg":"res5: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@7ff4362a\n"},"dateCreated":"2017-03-21T02:42:55-0400","dateStarted":"2017-03-21T03:22:53-0400","dateFinished":"2017-03-21T03:22:54-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:317"},{"title":"Load position_file from PostgreSQL","text":"import org.apache.spark._\nimport org.apache.spark.sql._\nimport sqlContext.implicits._\nimport java.sql._\n\nval startTimeDB1 = System.currentTimeMillis();\nval positionFileDataFrame = sqlContext\n  .load(\"jdbc\", Map(\n  \"url\" -> \"jdbc:postgresql://localhost/postgres?user=giga123&password=giga123\",\n  \"dbtable\" -> \"position_file\"))\nvar positionFileRDD = positionFileDataFrame.map(row =>  new PositionFile(\n    row.getAs[Int](\"UniqueId\"), \n    row.getAs[Int](\"Position_Id\"),  \n    row.getAs[String](\"Trade_Id_DO\"),  \n    row.getAs[Int](\"Trade_Id_Id\"),   \n    row.getAs[Int](\"Trade_Id_version\"),  \n    row.getAs[String](\"Trade_Id_Leg\"),  \n    row.getAs[String](\"LifeCycle_Status\")\n    ))\npositionFileRDD.count()\nval endTimeDB1 = System.currentTimeMillis();\nprintln(\"--- Time took to get position_file data from DB in seconds=\" + (endTimeDB1-startTimeDB1)/1000.0f);","dateUpdated":"2017-03-21T03:23:03-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1490120261946_1096522766","id":"20170321-141741_358624587","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark._\nimport org.apache.spark.sql._\nimport sqlContext.implicits._\nimport java.sql._\nstartTimeDB1: Long = 1490124190725\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\npositionFileDataFrame: org.apache.spark.sql.DataFrame = [Position_Id: int, Trade_Id_DO: string, Trade_Id_Id: int, Trade_Id_version: int, Trade_Id_Leg: string, LifeCycle_Status: string, UniqueId: int]\npositionFileRDD: org.apache.spark.rdd.RDD[PositionFile] = MapPartitionsRDD[2] at map at <console>:47\nres0: Long = 1000000\nendTimeDB1: Long = 1490124209110\n--- Time took to get position_file data from DB in seconds=18.385\r\n"},"dateCreated":"2017-03-21T02:17:41-0400","dateStarted":"2017-03-21T03:23:03-0400","dateFinished":"2017-03-21T03:23:29-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:318"},{"title":"Load calculated_measures from PostgreSQL","text":"import org.apache.spark._\nimport org.apache.spark.sql._\nimport sqlContext.implicits._\nimport java.sql._\n\nval startTimeDB2 = System.currentTimeMillis();\n\nval calculatedMeasuresDataFrame = sqlContext\n  .load(\"jdbc\", Map(\n  \"url\" -> \"jdbc:postgresql://localhost/postgres?user=giga123&password=giga123\",\n  \"dbtable\" -> \"calculated_measures\"))\nvar calculatedMeasuresRDD = calculatedMeasuresDataFrame.map(row =>  new CalculatedMeasures(\n    row.getAs[Int](\"UniqueId\"), \n    row.getAs[Int](\"Position_Id\"),  \n    row.getAs[Int](\"UBS_Measure_Id\"),  \n    row.getAs[String](\"Scenario_Id_Domain\"),   \n    row.getAs[Int](\"Scenario_Id_Id\"), \n    row.getAs[Int](\"Market_Data_Segment_Id1\"),  \n    row.getAs[Int](\"Market_Data_Segment_Id2\"),  \n    row.getAs[Double](\"Value_USD\"),   \n    row.getAs[String](\"Unit_Of_Measure\"),  \n    row.getAs[Double](\"Value_Unit_Of_Measure\")\n    ))\ncalculatedMeasuresRDD.count()\nval endTimeDB2 = System.currentTimeMillis();\nprintln(\"--- Time took to get calculated_measures data from DB in seconds=\" + (endTimeDB2-startTimeDB2)/1000.0f);","dateUpdated":"2017-03-21T03:24:37-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1490120328770_-163237078","id":"20170321-141848_283026753","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark._\nimport org.apache.spark.sql._\nimport sqlContext.implicits._\nimport java.sql._\nstartTimeDB2: Long = 1490124279524\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\ncalculatedMeasuresDataFrame: org.apache.spark.sql.DataFrame = [Position_Id: int, UBS_Measure_Id: int, Scenario_Id_Domain: string, Scenario_Id_Id: int, Market_Data_Segment_Id1: int, Market_Data_Segment_Id2: int, Value_USD: double, Unit_Of_Measure: string, Value_Unit_Of_Measure: double, UniqueId: int]\ncalculatedMeasuresRDD: org.apache.spark.rdd.RDD[CalculatedMeasures] = MapPartitionsRDD[8] at map at <console>:71\nres6: Long = 1000000\nendTimeDB2: Long = 1490124286343\n--- Time took to get calculated_measures data from DB in seconds=6.819\r\n"},"dateCreated":"2017-03-21T02:18:48-0400","dateStarted":"2017-03-21T03:24:37-0400","dateFinished":"2017-03-21T03:24:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:319"},{"title":"Load position_indicative from PostgreSQL","text":"import org.apache.spark._\nimport org.apache.spark.sql._\nimport sqlContext.implicits._\nimport java.sql._\n\nval startTimeDB3 = System.currentTimeMillis();\nval positionIndicativeDataFrame = sqlContext\n  .load(\"jdbc\", Map(\n  \"url\" -> \"jdbc:postgresql://localhost/postgres?user=giga123&password=giga123\",\n  \"dbtable\" -> \"position_indicative\"))\nvar positionIndicativeRDD = positionIndicativeDataFrame.map(row =>  new PositionIndicative(\n    row.getAs[Int](\"UniqueId\"), \n    row.getAs[Int](\"Position_Id\"),  \n    row.getAs[Int](\"Position_Indicative_Type_Id\"),  \n    row.getAs[Double](\"Value\"),   \n    row.getAs[String](\"Unit_Of_Measure1\"),  \n    row.getAs[String](\"Unit_Of_Measure2\")\n    ))\npositionIndicativeRDD.count()\n\nval endTimeDB3 = System.currentTimeMillis();\nprintln(\"--- Time took to get position_indicative data from DB in seconds=\" + (endTimeDB3-startTimeDB3)/1000.0f);","dateUpdated":"2017-03-21T03:25:23-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1489687170845_1759936036","id":"20170316-135930_1405182499","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark._\nimport org.apache.spark.sql._\nimport sqlContext.implicits._\nimport java.sql._\nstartTimeDB3: Long = 1490124326366\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\npositionIndicativeDataFrame: org.apache.spark.sql.DataFrame = [Position_Id: int, Position_Indicative_Type_Id: int, Value: double, Unit_Of_Measure1: string, Unit_Of_Measure2: string, UniqueId: int]\npositionIndicativeRDD: org.apache.spark.rdd.RDD[PositionIndicative] = MapPartitionsRDD[14] at map at <console>:95\nres10: Long = 1000000\nendTimeDB3: Long = 1490124331691\n--- Time took to get position_indicative data from DB in seconds=5.325\r\n"},"dateCreated":"2017-03-16T01:59:30-0400","dateStarted":"2017-03-21T03:25:23-0400","dateFinished":"2017-03-21T03:25:32-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:320"},{"title":"Load market_data_segment from PostgreSQL","text":"import org.apache.spark._\nimport org.apache.spark.sql._\nimport sqlContext.implicits._\nimport java.sql._\n\nval startTimeDB4 = System.currentTimeMillis();\nval marketDataSegmentDataFrame = sqlContext\n  .load(\"jdbc\", Map(\n  \"url\" -> \"jdbc:postgresql://localhost/postgres?user=giga123&password=giga123\",\n  \"dbtable\" -> \"market_data_segment\"))\nvar marketDataSegmentRDD = marketDataSegmentDataFrame.map(row =>  new MarketDataSegment(\n    row.getAs[Int](\"UniqueId\"), \n    row.getAs[Int](\"Market_Data_Segment_Id\"),  \n    row.getAs[String](\"Market_Dataset_Name\"),  \n    row.getAs[String](\"Name\"),   \n    row.getAs[String](\"Market_Dataset_Type\"),  \n    row.getAs[String](\"Market_Dataset_Context\"),  \n    row.getAs[String](\"Curve_Type\")\n    ))\nmarketDataSegmentRDD.count()\n\nval endTimeDB4 = System.currentTimeMillis();\nprintln(\"--- Time took to get market_data_segment data from DB in seconds=\" + (endTimeDB4-startTimeDB4)/1000.0f);","dateUpdated":"2017-03-21T03:26:43-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1490122413118_-85745494","id":"20170321-145333_1018389217","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark._\nimport org.apache.spark.sql._\nimport sqlContext.implicits._\nimport java.sql._\nstartTimeDB4: Long = 1490124406693\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\nmarketDataSegmentDataFrame: org.apache.spark.sql.DataFrame = [Market_Data_Segment_Id: int, Market_Dataset_Name: string, Name: string, Market_Dataset_Type: string, Market_Dataset_Context: string, Curve_Type: string, UniqueId: int]\nmarketDataSegmentRDD: org.apache.spark.rdd.RDD[MarketDataSegment] = MapPartitionsRDD[20] at map at <console>:119\nres14: Long = 1000000\nendTimeDB4: Long = 1490124412038\n--- Time took to get market_data_segment data from DB in seconds=5.345\r\n"},"dateCreated":"2017-03-21T02:53:33-0400","dateStarted":"2017-03-21T03:26:43-0400","dateFinished":"2017-03-21T03:26:52-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:321"},{"title":"Load market_data_segment_indicative  from PostgreSQL","text":"import org.apache.spark._\nimport org.apache.spark.sql._\nimport sqlContext.implicits._\nimport java.sql._\n\nval startTimeDB5 = System.currentTimeMillis();\nval marketDataSegmentIndicativeDataFrame = sqlContext\n  .load(\"jdbc\", Map(\n  \"url\" -> \"jdbc:postgresql://localhost/postgres?user=giga123&password=giga123\",\n  \"dbtable\" -> \"market_data_segment_indicative\"))\nvar marketDataSegmentIndicativeRDD = marketDataSegmentIndicativeDataFrame.map(row =>  new MarketDataSegmentIndicative(\n    row.getAs[Int](\"UniqueId\"), \n    row.getAs[Int](\"Market_Data_Segment_Id\"),  \n    row.getAs[Int](\"UBS_Indicative_Type\"),  \n    row.getAs[Double](\"Value\"),   \n    row.getAs[String](\"Unit_Of_Measure1\"),  \n    row.getAs[String](\"Unit_Of_Measure2\"),  \n    row.getAs[String](\"Source_Method\"),  \n    row.getAs[String](\"Source_Type\"),  \n    row.getAs[String](\"Source_Id\")\n    ))\nmarketDataSegmentIndicativeRDD.count()\n\nval endTimeDB5 = System.currentTimeMillis();\nprintln(\"--- Time took to get market_data_segment_indicative data from DB in seconds=\" + (endTimeDB5-startTimeDB5)/1000.0f);","dateUpdated":"2017-03-21T03:26:57-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1490123015950_842681485","id":"20170321-150335_377927655","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark._\nimport org.apache.spark.sql._\nimport sqlContext.implicits._\nimport java.sql._\nstartTimeDB5: Long = 1490124421615\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\nmarketDataSegmentIndicativeDataFrame: org.apache.spark.sql.DataFrame = [Market_Data_Segment_Id: int, UBS_Indicative_Type: int, Value: double, Unit_Of_Measure1: string, Unit_Of_Measure2: string, Source_Method: string, Source_Type: string, Source_Id: string, UniqueId: int]\nmarketDataSegmentIndicativeRDD: org.apache.spark.rdd.RDD[MarketDataSegmentIndicative] = MapPartitionsRDD[23] at map at <console>:131\nres17: Long = 1000000\nendTimeDB5: Long = 1490124426437\n--- Time took to get market_data_segment_indicative data from DB in seconds=4.822\r\n"},"dateCreated":"2017-03-21T03:03:35-0400","dateStarted":"2017-03-21T03:26:57-0400","dateFinished":"2017-03-21T03:27:07-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:322"},{"title":"Save Data To Grid","text":"%spark\n\nval startTimeToGrid = System.currentTimeMillis();\n\ncalculatedMeasuresRDD.saveToGrid();\npositionIndicativeRDD.saveToGrid();\npositionFileRDD.saveToGrid();\nmarketDataSegmentRDD.saveToGrid();\nmarketDataSegmentIndicativeRDD.saveToGrid();\n\nval endTimeToGrid = System.currentTimeMillis();\nprintln(\"--- Time took to store in grid in seconds=\" + (endTimeToGrid-startTimeToGrid)/1000.0f);","dateUpdated":"2017-03-21T03:27:11-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"title":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1489687435408_1807227858","id":"20170316-140355_974096189","result":{"code":"SUCCESS","type":"TEXT","msg":"startTimeToGrid: Long = 1490124432548\nendTimeToGrid: Long = 1490124522912\n--- Time took to store in grid in seconds=90.364\r\n"},"dateCreated":"2017-03-16T02:03:55-0400","dateStarted":"2017-03-21T03:27:11-0400","dateFinished":"2017-03-21T03:28:44-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:323"},{"title":"Query record and counts from Grid for PositionFile","text":"%spark\n\nval startTimeCountFromGrid = System.currentTimeMillis();\nval resultPositionFile = sc.gridSql[PositionFile](\"positionId = 10006\")\n//resultPositionFile.take(1//|).foreach(println)\nval endTimeCountFromGrid = System.currentTimeMillis();\nprintln(\"--- Time took to count recrods from grid in seconds=\" + (endTimeCountFromGrid-startTimeCountFromGrid)/1000.0f);","dateUpdated":"2017-03-21T02:12:23-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1490018224327_-1480968287","id":"20170320-095704_1702774849","dateCreated":"2017-03-20T09:57:04-0400","dateStarted":"2017-03-21T10:55:30-0400","dateFinished":"2017-03-21T10:56:06-0400","status":"ABORT","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:324"},{"text":"%spark\n\nval startTimeCountFromGridForCalculatedMeasures = System.currentTimeMillis();\nval resultCalculatedMeasures = sc.gridSql[CalculatedMeasures](\"positionId = 10006\")\n//resultCalculatedMeasures.take(1).foreach(println)\n//sc.gridRdd[CalculatedMeasures]().count()\nval endTimeCountFromGridForCalculatedMeasures = System.currentTimeMillis();\nprintln(\"--- Time took to count recrods from grid in seconds=\" + (endTimeCountFromGridForCalculatedMeasures-startTimeCountFromGridForCalculatedMeasures)/1000.0f);","dateUpdated":"2017-03-21T02:12:23-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1490019629072_-521568162","id":"20170320-102029_1744516529","dateCreated":"2017-03-20T10:20:29-0400","dateStarted":"2017-03-21T10:56:06-0400","dateFinished":"2017-03-21T10:56:07-0400","status":"ABORT","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:325"},{"title":"Load from Grid","text":"%spark\n\nval startTimeGrid = System.currentTimeMillis();\nval loadPositionIndicative = sqlContext.read.grid.load(\"positionIndicative\")\nval loadPositionFile= sqlContext.read.grid.load(\"positionFile\")\nval loadCalculatedMeasures = sqlContext.read.grid.load(\"calculatedMeasures\")\nval endTimeGrid = System.currentTimeMillis();\n\nprintln(\"--- Time took in seconds=\" + (endTimeGrid-startTimeGrid)/1000.0f);","dateUpdated":"2017-03-21T02:12:23-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1489688266155_-1927521493","id":"20170316-141746_1119528709","dateCreated":"2017-03-16T02:17:46-0400","dateStarted":"2017-03-21T10:56:06-0400","dateFinished":"2017-03-21T10:56:17-0400","status":"ABORT","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:326"},{"dateUpdated":"2017-03-21T02:12:23-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1489687634759_-1113710815","id":"20170316-140714_1983522452","dateCreated":"2017-03-16T02:07:14-0400","dateStarted":"2017-03-21T10:56:07-0400","dateFinished":"2017-03-21T10:56:17-0400","status":"ABORT","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:327"}],"name":"UBS_Demo","id":"2CDTFVHQM","angularObjects":{"2C8ZD2VAE:shared_process":[],"2CBGBF7G7:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}